// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions      Session[]
  accounts      Account[]
  notes         Note[]
  contexts      AIContext[]
  categories    Category[]
  apiKeys       ApiKey[]
  chats         Chat[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  categories Category[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contexts  AIContext[] 

  @@map("note")
}

model AIContext {
  id        String   @id @default(uuid())
  title     String 
  prompt    String
  notes     Note[]  
  chats     Chat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("context")
}

//TODO: Pas de co donc a check
model Category {
  id      String  @id @default(uuid())
  title   String
  weight  Float // Poids entre 0 et 1, a voir si c'est accurate avec l'IA   
  notes   Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String    @id @default(uuid())
  name      String
  token     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  lastUsedAt DateTime?
  expiresAt DateTime?
  isActive  Boolean   @default(true)

  @@unique([token])
  @@map("api_key")
}

model Chat {
  id          String    @id @default(uuid())
  title       String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contextId   String?
  context     AIContext? @relation(fields: [contextId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  
  @@map("chat")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  role      String   // "user" | "assistant" | "system", utiliser une enum ?
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  metadata  Json?    // Pour stocker des données supplémentaires
  
  @@map("message")
}